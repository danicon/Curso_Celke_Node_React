{"ast":null,"code":"'use strict';\n\nimport _classCallCheck from \"C:\\\\wamp64\\\\www\\\\Curso_Celke\\\\Curso_Celke_Node_React\\\\React\\\\Login_React\\\\login\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\wamp64\\\\www\\\\Curso_Celke\\\\Curso_Celke_Node_React\\\\React\\\\Login_React\\\\login\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport utils from './../utils.js';\nvar InterceptorManager = /*#__PURE__*/function () {\n  function InterceptorManager() {\n    _classCallCheck(this, InterceptorManager);\n    this.handlers = [];\n  }\n\n  /**\r\n   * Add a new interceptor to the stack\r\n   *\r\n   * @param {Function} fulfilled The function to handle `then` for a `Promise`\r\n   * @param {Function} rejected The function to handle `reject` for a `Promise`\r\n   *\r\n   * @return {Number} An ID used to remove interceptor later\r\n   */\n  _createClass(InterceptorManager, [{\n    key: \"use\",\n    value: function use(fulfilled, rejected, options) {\n      this.handlers.push({\n        fulfilled: fulfilled,\n        rejected: rejected,\n        synchronous: options ? options.synchronous : false,\n        runWhen: options ? options.runWhen : null\n      });\n      return this.handlers.length - 1;\n    }\n    /**\r\n     * Remove an interceptor from the stack\r\n     *\r\n     * @param {Number} id The ID that was returned by `use`\r\n     *\r\n     * @returns {Boolean} `true` if the interceptor was removed, `false` otherwise\r\n     */\n  }, {\n    key: \"eject\",\n    value: function eject(id) {\n      if (this.handlers[id]) {\n        this.handlers[id] = null;\n      }\n    }\n    /**\r\n     * Clear all interceptors from the stack\r\n     *\r\n     * @returns {void}\r\n     */\n  }, {\n    key: \"clear\",\n    value: function clear() {\n      if (this.handlers) {\n        this.handlers = [];\n      }\n    }\n    /**\r\n     * Iterate over all the registered interceptors\r\n     *\r\n     * This method is particularly useful for skipping over any\r\n     * interceptors that may have become `null` calling `eject`.\r\n     *\r\n     * @param {Function} fn The function to call for each interceptor\r\n     *\r\n     * @returns {void}\r\n     */\n  }, {\n    key: \"forEach\",\n    value: function forEach(fn) {\n      utils.forEach(this.handlers, function forEachHandler(h) {\n        if (h !== null) {\n          fn(h);\n        }\n      });\n    }\n  }]);\n  return InterceptorManager;\n}();\nexport default InterceptorManager;","map":null,"metadata":{},"sourceType":"module"}